import ast
from typing import List, Dict

class VulnerabilityVisitor(ast.NodeVisitor):
    def __init__(self):
        self.findings: List[Dict] = []
        
    def visit_Call(self, node):
        # Check for dangerous function calls
        if isinstance(node.func, ast.Name):
            if node.func.id in ['eval', 'exec', 'os.system']:
                self.findings.append({
                    'type': 'dangerous_function',
                    'function': node.func.id,
                    'line': node.lineno
                })
        
        self.generic_visit(node)
        
    def visit_BinOp(self, node):
        # Check for potential SQL injection
        if isinstance(node.op, ast.Add):
            if isinstance(node.left, ast.Str) and 'SELECT' in node.left.s:
                self.findings.append({
                    'type': 'sql_injection',
                    'line': node.lineno
                })
        
        self.generic_visit(node) 